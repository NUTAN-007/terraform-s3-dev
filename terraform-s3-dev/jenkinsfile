pipeline {
    agent any

    environment {
        PLATFORM    = 'dev'
        GIT_TOKEN   = credentials('arch-git-token')
        GIT_BRANCH  = 'main'
        //GIT_LOC     = 'arch' 
        GIT_REPO    = 'terraform-s3-dev'
        TF_PATH     = 'terraform-s3-dev'
        AWS_CREDS = credentials('aws-creds')
        AWS_DEFAULT_REGION = 'us-east-1'
        timestamp = sh(script: "date +%Y%m%d-%H%M%S", returnStdout: true).trim()
    }

    parameters {
        booleanParam(name: 'terraform_init', defaultValue: false, description: 'Run terraform init')
        booleanParam(name: 'terraform_validate', defaultValue: false, description: 'Run terraform validate')
        booleanParam(name: 'terraform_plan', defaultValue: false, description: 'Run terraform plan')
        booleanParam(name: 'terraform_apply', defaultValue: false, description: 'Run terraform apply')
        booleanParam(name: 'TARGET_BUCKET', defaultValue: false, description: 'aws_s3_bucket.create_bucket')
        booleanParam(name: 'TARGET_FOLDERS', defaultValue: false, description: 'aws_s3_object.create_folders')
        booleanParam(name: 'TARGET_LIFECYCLE', defaultValue: false, description: 'aws_s3_bucket_lifecycle_configuration.bucket_config')
        booleanParam(name: 'TARGET_POLICY', defaultValue: false, description: 'aws_s3_bucket_policy.bucket_policy')
        booleanParam(name: 'TARGET_LOGGING', defaultValue: false, description: 'aws_s3_bucket_logging.enable_logging')
        booleanParam(name: 'destroy_bucket', defaultValue: false, description: 'Destroy S3 bucket only')
        booleanParam(name: 'destroy_folders', defaultValue: false, description: 'Destroy S3 folders only')
    }

    stages {

        stage('prerequisite') {
            steps {
                sh '''
                echo "==== Cleaning and Cloning Repo ===="
                rm -rf /var/lib/jenkins/workspace/tf-s3-dev/*
                git clone https://github.com/NUTAN-007/terraform-s3-dev.git 
                '''
            }
        }

        stage('terraform-init') {
            when { expression { params.terraform_init } }
            steps {
                sh '''
                echo "==== Terraform Init Started ===="
                cd ${GIT_REPO}/${TF_PATH}
                ls
                terraform init 
                echo "==== Terraform Init Completed ===="
                '''
            }
        }

        stage('terraform-validate') {
            when { expression { params.terraform_validate } }
            steps {
                sh '''
                echo "==== Terraform Validate Started ===="
                cd ${GIT_REPO}/${TF_PATH}
                terraform validate
                echo "==== Terraform Validate Completed ===="
                '''
            }
        }

        stage('terraform-plan') {
            when { expression { params.terraform_plan } }
            steps {
                sh '''
                echo "==== Terraform Plan Started ===="
                cd ${GIT_REPO}/${TF_PATH}
                terraform plan > terraform-plan-${timestamp}.log
                echo "==== Terraform Plan Completed ===="
                '''
            }
        }

        stage('terraform-apply') {
            when { expression { params.terraform_apply } }
            steps {
                script {
                    def targets = []
                    if (params.TARGET_BUCKET) {
                        targets.add("-target=aws_s3_bucket.create_bucket")
                    }
                    if (params.TARGET_FOLDERS) {
                        targets.add("-target=aws_s3_object.create_folders")
                    }
                    if (params.TARGET_LIFECYCLE) {
                        targets.add("-target=aws_s3_bucket_lifecycle_configuration.bucket_config")
                    }
                    if (params.TARGET_POLICY) {
                        targets.add("-target=aws_s3_bucket_policy.bucket_policy")
                    }
                    if (params.TARGET_LOGGING) {
                        targets.add("-target=aws_s3_bucket_logging.enable_logging")
                    }
                    def targetArgs = targets.join(' ')
                    sh """
                    echo "==== Terraform Apply Started ===="
                    cd ${GIT_REPO}/${TF_PATH}
                    terraform apply -auto-approve ${targetArgs} > terraform-apply-${timestamp}.log
                    echo "==== Terraform Apply Completed ===="
                    """
                }
            }
        }


        stage('destroy-bucket') {
            when { expression { params.destroy_bucket } }
            steps {
                sh '''
                echo "==== Destroying S3 Bucket ===="
                cd ${GIT_REPO}/${TF_PATH}
                
                terraform destroy -target aws_s3_bucket.create_bucket -auto-approve > destroy-bucket-${timestamp}.log
                echo "==== S3 Bucket Destroyed ===="
                '''
            }
        }

        stage('destroy-folders') {
            when { expression { params.destroy_folders } }
            steps {
                sh '''
                echo "==== Destroying S3 Folders ===="
                cd ${GIT_REPO}/${TF_PATH}
                terraform apply -auto-approve -target=null_resource.delete_folder1 > delete-folders-${timestamp}.log
                echo "==== S3 Folders Destroyed ===="
                '''
            }
        }
    }

    post {
        always {
            sh '''
            rm -rf ${GIT_REPO}
            '''
        }
    }
}
